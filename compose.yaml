# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  client:
    image: node:18-bullseye-slim
    container_name: client-container
    working_dir: /var/www
    tty: true
    volumes:
      - ./client:/var/www
    ports:
      - 8080:8080
    networks:
      - backend
  server:
    container_name: server-container
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /var/www
    tty: true
    volumes:
      - ./server:/var/www
    ports:
      - 8081:8081
      - 3000:3000
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
  # loging database: psql -U admin -d app
  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=app
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
      - TZ=UTC
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
networks:
  backend:
volumes:
  db-data:
